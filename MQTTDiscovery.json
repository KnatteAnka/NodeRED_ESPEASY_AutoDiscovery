[
   {
      "id":"c7a7e5ea.d0e448",
      "type":"tab",
      "label":"MQTT Discovery",
      "disabled":false,
      "info":""
   },
   {
      "id":"f084428a.9337c",
      "type":"mqtt in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"EE/#",
      "qos":"2",
      "datatype":"auto",
      "broker":"18ac67d8.ba0268",
      "x":150,
      "y":880,
      "wires":[
         [
            "e3b57f40.ed83c"
         ]
      ]
   },
   {
      "id":"10942935.b68447",
      "type":"file in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "filename":"/config/EasyESP_MQTTDisc.txt",
      "format":"utf8",
      "chunk":false,
      "sendError":false,
      "encoding":"none",
      "x":610,
      "y":40,
      "wires":[
         [
            "322414ff.92a7ac"
         ]
      ]
   },
   {
      "id":"d2cb1728.e26c68",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":1010,
      "y":80,
      "wires":[
         
      ]
   },
   {
      "id":"e2a7fb50.1656e8",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Save List",
      "props":[
         {
            "p":"payload"
         }
      ],
      "repeat":"3600",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":330,
      "y":140,
      "wires":[
         [
            "89aa47c5.370818"
         ]
      ]
   },
   {
      "id":"8eded1f8.44643",
      "type":"file",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "filename":"/config/EasyESP_MQTTDisc.txt",
      "appendNewline":true,
      "createDir":true,
      "overwriteFile":"true",
      "encoding":"none",
      "x":770,
      "y":80,
      "wires":[
         [
            "d2cb1728.e26c68"
         ]
      ]
   },
   {
      "id":"1b935601.6f77fa",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"payload",
            "pt":"msg",
            "to":"topic",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":460,
      "y":840,
      "wires":[
         [
            "38ffc90b.146236"
         ]
      ]
   },
   {
      "id":"7d13c4d8.26b26c",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"payload",
      "targetType":"msg",
      "statusVal":"",
      "statusType":"auto",
      "x":830,
      "y":1060,
      "wires":[
         
      ]
   },
   {
      "id":"12ae2bf8.72d214",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"topic",
      "propertyType":"msg",
      "rules":[
         {
            "t":"eq",
            "v":"EE/TV_R_11/Stepper/Percent",
            "vt":"str"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":1,
      "x":330,
      "y":1060,
      "wires":[
         [
            "1b935601.6f77fa",
            "31675fed.b99f7"
         ]
      ]
   },
   {
      "id":"38ffc90b.146236",
      "type":"function",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "func":"var InputPayload = msg.payload.split(\"/\")\n//Check if currect amount of \"/\" if not skipp the package\nvar Debug = flow.get(\"Debug\")\nif (InputPayload.length !=4 ){\n    if(Debug)node.warn(\"Skipping:\"+msg.payload) \n    return  \n} \nInputPayload = [InputPayload]\nInputPayload = {\n    Prefix:InputPayload[0][0],\n    Unit:InputPayload[0][1],\n    TaskName:InputPayload[0][2],\n    Value:InputPayload[0][3]\n}\n\nvar Message =(\"NewValue:\\nEE:\\t\" + InputPayload.Prefix+\n\"\\nUnit:\\t\"+ InputPayload.Unit+\n\"\\nDevice:\\t\"+ InputPayload.TaskName+\n\"\\nValue:\\t\"+ InputPayload.Value\n);\n//Load NamePrefix\nvar NamePrefix = flow.get(\"NamePrefix\");\nif (NamePrefix==undefined )NamePrefix=\"\";\n\n//Load OutputMQTT\nvar OutputMQTT = flow.get(\"OutputMQTT\");\nif (OutputMQTT==undefined )OutputMQTT=\"homeassistant\";\n\n//Load Settings\nvar Settings = flow.get(\"Settings\");\nif (Settings==undefined )Settings={};\n\n\n//node.warn(Message)\nvar CurrentList = flow.get(\"List\");\nif (CurrentList==undefined )CurrentList=[];\nif ( CurrentList==\"\")CurrentList=[];\nvar Found2 = false\nvar CheckPrefix = InputPayload.Value.substring(0,1)\nfor (var BB in CurrentList){\n    var Found = 4\n    for (var CC in CurrentList[BB]){\n        if (CurrentList[BB][CC]==InputPayload[CC])Found -= 1\n    }\n    if (Found==0) Found2 = true\n    Message +=\"\\nBB:\"+BB+\" Found:\"+Found+\" Found2:\"+Found2\n    if (Found2)break\n}\n\nif (!Found2&&CheckPrefix!=\"_\"){\n    var Test_type = InputPayload.Value.toLowerCase()\n    \n    var type = \"sensor\"\n    var Values = {   \n     name : InputPayload.Unit+\" \"+InputPayload.TaskName+\" \"+InputPayload.Value,\n     unique_id : InputPayload.Unit+\"_\"+InputPayload.TaskName+\"_\"+InputPayload.Value,\n     device:{\n        ids : [NamePrefix+InputPayload.Unit],\n        model : \"ESPEASY\",\n        manufacturer : \"ESPEASY\",\n        name : NamePrefix+InputPayload.Unit\n        \n     },\n     state_topic : msg.payload//,\n     //unit_of_measurement : \"\",\n     \n    }\n    \n    var NotSensors = [\n        {\n            ValueName: \"State\",\n            Type: \"switch\"\n        },\n        {\n            ValueName: \"Relay\",\n            Type: \"switch\"\n        },\n        {\n            ValueName: \"Brightness\",\n            Type: \"light\",\n            Brightness: 255,\n            RGB: true\n        },\n        {\n            \"ValueName\": \"Percent\",\n            \"Type\": \"light\",\n            \"Brightness\": 100\n        }\n    ]\n    var Units = [\n        [\"battery\",\"%\"],\n        [\"humidity\",\"%\"],\n        [\"temperature\",\"Â°C\"],\n        [\"power\",\"W\"],\n        [\"pressure\",\"hPA\"],\n        [\"current\",\"A\"],\n        [\"energy\",\"KWh\"],\n        [\"voltage\",\"V\"]\n        ]\n    //Import settings if variable is declared \n    if (Settings.NotSensors!=undefined){\n        NotSensors = Settings.NotSensors\n    }    \n    if (Settings.Units!=undefined){\n        Units = Settings.Units\n    }\n        \n    for (var AA in NotSensors){\n       //loop all name alternetivs against the list of known variable names\n       //Set to that type of device if found\n       //else its a sensor and only input device\n       //node.warn(\"Check if:\"+InputPayload.Value+\"==\"+NotSensors[AA][0])\n       if (NotSensors[AA].ValueName!=undefined&&NotSensors[AA].Type!=undefined){\n            var Check = InputPayload.Value.indexOf(NotSensors[AA].ValueName)\n            if (Check>-1){\n                //Found that its declared and the set the type\n                var SetRGB=false\n                if(NotSensors[AA].Brightness!=undefined) MaxLight=NotSensors[AA].Brightness\n                else MaxLight=100\n                if(NotSensors[AA].RGB!=undefined) SetRGB=NotSensors[AA].RGB\n                type=NotSensors[AA].Type\n                \n            }\n       }    \n    }\n    if (type==\"light\"){\n        //node.warn(\"Check Light:\"+InputPayload.TaskName)\n        var BaseTopic =  InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/\"+InputPayload.Value\n        Values.state_topic =InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/_\"+InputPayload.Value\n        //Values.optimistic = true\n        Values.command_topic = BaseTopic+\"/State\"\n        Values.payload_on = 1\n        Values.payload_off = 0\n        Values.brightness_scale = MaxLight\n        Values.brightness_state_topic =BaseTopic\n        Values.brightness_command_topic = BaseTopic+\"/Set\"\n        if (SetRGB){\n            Values.optimistic = true\n            Values.rgb_command_topic =  \"O\"+BaseTopic+\"/RGB\"  \n            \n        }\n        \n    }\n    if (type==\"switch\"){\n        Values.state_off = 0\n        Values.state_on = 1\n        Values.payload_on =     \"event,Set\"+InputPayload.Value+\"=1\"\n        Values.payload_off =    \"event,Set\"+InputPayload.Value+\"=0\"\n        Values.command_topic = InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/cmd\"\n    }\n    \n    var Topic = OutputMQTT+\"/\"+type+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"_\"+InputPayload.Value+\"/config\"\n    \n    var Found = false\n    if (type==\"sensor\"){\n        for (var AA in Units){\n            if (Units[AA][0]==Test_type){\n                if (Units[AA][2]!=undefined){\n                    Values.device_class=Units[AA][2]\n                }    \n                Found=true\n                Values.unit_of_measurement=Units[AA][1]\n            }    \n        }\n        if(Debug)node.error(\"Setting unit_measurment:\"+Settings.UseDefaultUnit+\"\\n Found:\"+Found+\"\\n Test_type:\"+Test_type) \n        if (!Found){\n            if (Settings.UseDefaultUnit==undefined){\n                Values.unit_of_measurement = InputPayload.Value\n            }\n            else if (Settings.UseDefaultUnit==true){\n              //node.error(\"Setting unit_measurment:\"+Settings.UseDefaultUnit+\"\\n Found:\"+Found+\"\\n Test_type:\"+Test_type) \n              Values.unit_of_measurement = InputPayload.Value  \n            } \n        }\n    }\n    Message += \"\\nValues:\"\n    Message += \"\\n type:\"+type\n    Message += \"\\n name:\"+Values.name\n    Message += \"\\n unique_id:\"+Values.unique_id\n    Message += \"\\n device_class:\"+Values.device_class\n    Message += \"\\n state_topic:\"+Values.state_topic\n    Message += \"\\n unit_of_measurement:\"+Values.unit_of_measurement\n    Message += \"\\n ids:\"+Values.ids\n    Message += \"\\n devname:\"+Values.devname\n    CurrentList.push(InputPayload)\n    node.send( {\"payload\":Values,\"topic\":Topic})\n}\nflow.set(\"List\",CurrentList)\nif(Debug)node.warn(Message)\n",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":680,
      "y":900,
      "wires":[
         [
            "61dc00b3.b4bf",
            "7d13c4d8.26b26c"
         ]
      ]
   },
   {
      "id":"8599bbaf.213778",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Load List",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":340,
      "y":60,
      "wires":[
         [
            "10942935.b68447"
         ]
      ]
   },
   {
      "id":"2401637c.25954c",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Load Settings",
      "info":"",
      "x":330,
      "y":20,
      "wires":[
         
      ]
   },
   {
      "id":"d8b023b3.f5f1e",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Save Settings",
      "info":"",
      "x":330,
      "y":100,
      "wires":[
         
      ]
   },
   {
      "id":"a1cb02f6.eb306",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Check if new should be added",
      "info":"",
      "x":200,
      "y":820,
      "wires":[
         
      ]
   },
   {
      "id":"6d3d037.bac3bfc",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":170,
      "y":520,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"8d038711.4d3c28",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"false",
      "payloadType":"bool",
      "x":170,
      "y":600,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"5f738a1d.0a39f4",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"DebugInput",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":370,
      "y":560,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"e3b57f40.ed83c",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"DebugInput",
      "propertyType":"flow",
      "rules":[
         {
            "t":"true"
         },
         {
            "t":"eq",
            "v":"Singel",
            "vt":"str"
         },
         {
            "t":"false"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":3,
      "x":190,
      "y":980,
      "wires":[
         [
            "e9b79ec3.be8f9"
         ],
         [
            "12ae2bf8.72d214"
         ],
         [
            
         ]
      ]
   },
   {
      "id":"3585d5c5.d070ba",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"Singel",
      "payloadType":"str",
      "x":170,
      "y":560,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"e1fe0ffe.531ce",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"Debug",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":360,
      "y":680,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"3c898208.b1b99e",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":170,
      "y":680,
      "wires":[
         [
            "e1fe0ffe.531ce"
         ]
      ]
   },
   {
      "id":"8e1e2ca7.4581a",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"false",
      "payloadType":"bool",
      "x":170,
      "y":720,
      "wires":[
         [
            "e1fe0ffe.531ce"
         ]
      ]
   },
   {
      "id":"4b11e5af.69564c",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Sensor example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/sensor/ESP_Fan_Controller_6/Tak_Temp_Temperature/config",
      "payload":"{\"name\":\"ESP_Fan_Controller_6 Temperature\",\"unique_id\":\"ESP_Fan_Controller_6_Tak_Temp_Temperature\",\"device\":{\"ids\":[\"ESP_Fan_Controller_6\"],\"model\":\"ESPEASY\",\"name\":\"ESP_Fan_Controller_6\"},\"device_class\":\"temperature\",\"state_topic\":\"homeassistant/ESP_Fan_Controller_6/Tak_Temp/Temperature\",\"unit_of_measurement\":\"C\"}",
      "payloadType":"json",
      "x":820,
      "y":760,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"61dc00b3.b4bf",
      "type":"mqtt out",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"",
      "qos":"",
      "retain":"true",
      "broker":"18ac67d8.ba0268",
      "x":1070,
      "y":880,
      "wires":[
         
      ]
   },
   {
      "id":"69a93b8d.dbe564",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/sensor/ESP_Fan_Controller_6/Tak_Temp_Temperature/config",
      "payload":"{}",
      "payloadType":"json",
      "x":850,
      "y":800,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"46723d78.be2ee4",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"ESP_",
      "payloadType":"str",
      "x":150,
      "y":240,
      "wires":[
         [
            "80c698db.01a5c8"
         ]
      ]
   },
   {
      "id":"abf5e578.e64ad8",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"",
      "payloadType":"str",
      "x":150,
      "y":280,
      "wires":[
         [
            "80c698db.01a5c8"
         ]
      ]
   },
   {
      "id":"80c698db.01a5c8",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"NamePrefix",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":360,
      "y":240,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"580263.4b1c9d9c",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"List",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":350,
      "y":460,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"253111b7.66b2ce",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Clear List",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"",
      "payloadType":"str",
      "x":160,
      "y":460,
      "wires":[
         [
            "580263.4b1c9d9c"
         ]
      ]
   },
   {
      "id":"76c77bfd.d0bce4",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":1090,
      "y":720,
      "wires":[
         
      ]
   },
   {
      "id":"31675fed.b99f7",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"payload",
      "targetType":"msg",
      "statusVal":"",
      "statusType":"auto",
      "x":490,
      "y":1000,
      "wires":[
         
      ]
   },
   {
      "id":"123b1bdd.4ba514",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"List",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1010,
      "y":40,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"89aa47c5.370818",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"payload",
            "pt":"msg",
            "to":"List",
            "tot":"flow"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":520,
      "y":80,
      "wires":[
         [
            "8eded1f8.44643"
         ]
      ]
   },
   {
      "id":"322414ff.92a7ac",
      "type":"function",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "func":"var Input = msg.payload\nif (Input.length>10){\n    //Its a array\n   Input = Input.slice(2)\n   Input = Input.slice(0,Input.length-3)\n   Rows = Input.split(\"]\")\n   \n   for (var AA in Rows){\n       \n       if (Rows[AA].startsWith(',[\"'))Rows[AA]=Rows[AA].slice(2)\n       \n       Rows[AA]=Rows[AA].slice(0,Rows[AA].length-1)\n       Rows[AA]=Rows[AA].split(\",\")\n       \n       var maxRow = Rows[AA].length-1\n       for(var BB in Rows[AA]){\n           \n           if (maxRow!=BB) Rows[AA][BB]=Rows[AA][BB].slice(1,Rows[AA][BB].length-1)\n           else Rows[AA][BB]=Rows[AA][BB].slice(1)\n       }\n   }\n   Input=Rows\n   \n}\nelse Input=\"\"\n//node.warn(Input)\nnode.send({\"payload\":Input})\n\n\n",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":840,
      "y":40,
      "wires":[
         [
            "123b1bdd.4ba514",
            "d2cb1728.e26c68"
         ]
      ]
   },
   {
      "id":"7f2cabb0.391184",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"V2.0",
      "info":"",
      "x":50,
      "y":20,
      "wires":[
         
      ]
   },
   {
      "id":"91511d8a.85c15",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Light example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/light/TV_R_11/Stepper_Percent/config",
      "payload":"{\"name\":\"TV_R_11 Stepper Percent\",\"unique_id\":\"TV_R_11_Stepper_Percent\",\"device\":{\"ids\":[\"ESP_TV_R_11\"],\"model\":\"ESPEASY\",\"manufacturer\":\"ESPEASY\",\"name\":\"ESP_TV_R_11\"},\"command_topic\":\"EE/TV_R_11/Stepper/Percent/State\",\"optimistic\":true,\"payload_on\":\"1\",\"payload_off\":\"0\",\"brightness_scale\":100,\"brightness_state_topic\":\"EE/TV_R_11/Stepper/Percent\",\"brightness_command_topic\":\"EE/TV_R_11/Stepper/Percent/Set\"}",
      "payloadType":"json",
      "x":830,
      "y":660,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"b9d56a96.ef3328",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/light/Nodered_Light/LightTest/config",
      "payload":"{}",
      "payloadType":"json",
      "x":850,
      "y":700,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"5d3cde1e.0ed88",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Settings",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"{\"Comment\":\"units is variable and sufix and device_class\",\"Units\":[[\"battery\",\"%\",\"battery\"],[\"humidity\",\"%\",\"humidity\"],[\"temperature\",\"Â°C\",\"temperature\"],[\"power\",\"W\",\"power\"],[\"pressure\",\"hPA\",\"pressure\"],[\"current\",\"A\",\"current\"],[\"energy\",\"KWh\",\"energy\"],[\"voltage\",\"V\",\"voltage\"],[\"gm\",\"GM\"]],\"NotSensors\":[{\"ValueName\":\"State\",\"Type\":\"switch\"},{\"ValueName\":\"Relay\",\"Type\":\"switch\"},{\"ValueName\":\"Brightness\",\"Type\":\"light\",\"Brightness\":255,\"RGB\":false},{\"ValueName\":\"RGBBrightness\",\"Type\":\"light\",\"Brightness\":255,\"RGB\":true},{\"ValueName\":\"Percent\",\"Type\":\"light\",\"Brightness\":100}],\"UseDefaultUnit\":false}",
      "payloadType":"json",
      "x":600,
      "y":320,
      "wires":[
         [
            "eb2e62bc.72124"
         ]
      ]
   },
   {
      "id":"eb2e62bc.72124",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"Settings",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":780,
      "y":320,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"1ff20790.1b7ed8",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"homeassistant",
      "payloadType":"str",
      "x":600,
      "y":260,
      "wires":[
         [
            "ea36bbf4.a60468"
         ]
      ]
   },
   {
      "id":"ea36bbf4.a60468",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"OutputMQTT",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":800,
      "y":260,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"e9b79ec3.be8f9",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"topic",
      "propertyType":"msg",
      "rules":[
         {
            "t":"cont",
            "v":"/config",
            "vt":"str"
         },
         {
            "t":"cont",
            "v":"/cmd",
            "vt":"str"
         },
         {
            "t":"cont",
            "v":"/Set",
            "vt":"str"
         },
         {
            "t":"cont",
            "v":"/State",
            "vt":"str"
         },
         {
            "t":"else"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":5,
      "x":310,
      "y":940,
      "wires":[
         [
            
         ],
         [
            
         ],
         [
            
         ],
         [
            
         ],
         [
            "1b935601.6f77fa"
         ]
      ]
   },
   {
      "id":"3e165b0e.0bf044",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"payload",
            "pt":"msg",
            "to":"",
            "tot":"str"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":520,
      "y":740,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"3af7d59.b50c42a",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/light/Nodered_Light/LightTest/config",
      "payload":"{}",
      "payloadType":"json",
      "x":850,
      "y":620,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"f982ba54.1dc028",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Termostat example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/climate/Nodered_Light/LightTest/config",
      "payload":"{\"name\":\"NodeRed_1 Time Time\",\"unique_id\":\"NodeRed_1_Time_Time\",\"device\":{\"ids\":[\"NodeRed_1\"],\"model\":\"ESPEASY\",\"manufacturer\":\"ESPEASY\",\"name\":\"NodeRed_1\"},\"temperature_command_topic\":\"IEE/NodeRed_1/Time/Time/Set\",\"mode_command_topic\":\"IEE/NodeRed_1/Time/Time/Mode\",\"temp_step\":0.25}",
      "payloadType":"json",
      "x":810,
      "y":580,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"c906085f.cdb168",
      "type":"mqtt in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"OEE/#",
      "qos":"2",
      "datatype":"auto",
      "broker":"18ac67d8.ba0268",
      "x":490,
      "y":1100,
      "wires":[
         [
            "6b853310.6e826c"
         ]
      ]
   },
   {
      "id":"3027cc12.6e1f24",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":830,
      "y":1100,
      "wires":[
         
      ]
   },
   {
      "id":"6b853310.6e826c",
      "type":"function",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "func":"var InputString = msg.payload\nvar InputTopic = msg.topic\nvar lastSlash = msg.topic.lastIndexOf(\"/\")+1\nvar Command = msg.topic.substring(lastSlash)\nvar Base = msg.topic.substring(1,lastSlash)\nvar Topic = []\nvar Payload = []\n//node.warn(\"InputString:\"+InputString+\"\\n Topic:\"+InputTopic+\"\\n Command:\"+Command+\"\\n Base:\"+Base)\nif (Command==\"RGB\"){\n    Values = InputString.split(\",\")\n    for (var AA in Values){\n        Output={}\n        Output.topic = Base+\"_\"+Command[AA]\n        Output.payload = Values[AA]\n        node.send(Output)\n    }\n    \n}\n",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":620,
      "y":1100,
      "wires":[
         [
            "3027cc12.6e1f24",
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"18ac67d8.ba0268",
      "type":"mqtt-broker",
      "name":"MQTT",
      "broker":"localhost",
      "port":"1883",
      "clientid":"",
      "usetls":false,
      "compatmode":false,
      "keepalive":"60",
      "cleansession":true,
      "birthTopic":"",
      "birthQos":"0",
      "birthPayload":"",
      "closeTopic":"",
      "closeQos":"0",
      "closePayload":"",
      "willTopic":"",
      "willQos":"0",
      "willPayload":""
   }
]
