[
   {
      "id":"c7a7e5ea.d0e448",
      "type":"tab",
      "label":"MQTT Discovery",
      "disabled":false,
      "info":""
   },
   {
      "id":"f084428a.9337c",
      "type":"mqtt in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"EE/#",
      "qos":"2",
      "datatype":"auto",
      "broker":"18ac67d8.ba0268",
      "inputs":0,
      "x":130,
      "y":720,
      "wires":[
         [
            "e3b57f40.ed83c"
         ]
      ]
   },
   {
      "id":"10942935.b68447",
      "type":"file in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "filename":"/config/EasyESP_MQTTDisc.txt",
      "format":"utf8",
      "chunk":false,
      "sendError":false,
      "encoding":"none",
      "allProps":false,
      "x":610,
      "y":40,
      "wires":[
         [
            "32fd2078.63187"
         ]
      ]
   },
   {
      "id":"d2cb1728.e26c68",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":1010,
      "y":80,
      "wires":[
         
      ]
   },
   {
      "id":"e2a7fb50.1656e8",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Save List",
      "props":[
         {
            "p":"payload"
         }
      ],
      "repeat":"3600",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":330,
      "y":140,
      "wires":[
         [
            "89aa47c5.370818"
         ]
      ]
   },
   {
      "id":"8eded1f8.44643",
      "type":"file",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "filename":"/config/EasyESP_MQTTDisc.txt",
      "appendNewline":true,
      "createDir":true,
      "overwriteFile":"true",
      "encoding":"none",
      "x":770,
      "y":80,
      "wires":[
         [
            "d2cb1728.e26c68"
         ]
      ]
   },
   {
      "id":"1b935601.6f77fa",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"Waypoin",
      "rules":[
         {
            "t":"set",
            "p":"payload",
            "pt":"msg",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":480,
      "y":760,
      "wires":[
         [
            "38ffc90b.146236"
         ]
      ]
   },
   {
      "id":"7d13c4d8.26b26c",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"payload",
      "targetType":"msg",
      "statusVal":"",
      "statusType":"auto",
      "x":1090,
      "y":800,
      "wires":[
         
      ]
   },
   {
      "id":"12ae2bf8.72d214",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"topic",
      "propertyType":"msg",
      "rules":[
         {
            "t":"eq",
            "v":"SingelTopic",
            "vt":"flow"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":1,
      "x":330,
      "y":920,
      "wires":[
         [
            "1b935601.6f77fa",
            "31675fed.b99f7"
         ]
      ]
   },
   {
      "id":"38ffc90b.146236",
      "type":"function",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "func":"\nfunction VerifyTextUnicodeCharacters(text)\n{\n    //Check if Text contains any Not allowed Chars \n    //Input: String to test\n    //Output: Array first val is true if all is good secound is the not allowed chars\n    var notSupportArray = [];\n    for (var i = text.length - 1; i >= 0; i--)\n        {\n            var charCode = text.charCodeAt(i);\n            // 0-9 48-57\n            // A-Z 65-90 , 97-122\n            // _ 95\n            if ((charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode == 95) || (charCode >= 97 && charCode <= 122))\n            {\n                \n            }\n            else\n            {\n                notSupportArray.push(charCode);\n            }\n        }\n    \n    if (notSupportArray.length == 0)\n        {\n            return [true,\"\"]\n        }\n    else\n        {\n            return [false,notSupportArray];\n        }\n}\n\nvar InputPayload = msg.topic.split(\"/\")\n//Check if currect amount of \"/\" if not skipp the package\nvar Debug = flow.get(\"Debug\")\nif (InputPayload.length !=4 ){\n    if(Debug)node.warn(\"Skipping Topic:\"+msg.topic+\"\\n Payload:\"+msg.payload+\"\\n not correct amount of '/'\") \n    return  \n} \nInputPayload = [InputPayload]\nInputPayload = {\n    Prefix:InputPayload[0][0],\n    Unit:InputPayload[0][1],\n    TaskName:InputPayload[0][2],\n    Value:InputPayload[0][3]\n}\n//--------------------------------------\n// Debug Message header\nvar Message =(\"Recived:\"+\n\"\\nEE:\\t\" + InputPayload.Prefix+\n\"\\nUnit:\\t\"+ InputPayload.Unit+\n\"\\nDevice:\\t\"+ InputPayload.TaskName+\n\"\\nValue:\\t\"+ InputPayload.Value\n);\n//--------------------------------------\n// Test that only allowed chars is used\nvar Test = [\n    {Test:\"Prefix\", Value:InputPayload.Prefix,   Title:\"Prefix have not allowed chars\"+InputPayload.Prefix},    // Test Prefix\n    {Test:\"Unit\",   Value:InputPayload.Unit,     Title:\"Unit have not allowed chars\"+InputPayload.Unit},            // Test Unit\n    {Test:\"Device\", Value:InputPayload.TaskName, Title:\"Device have not allowed chars\"+InputPayload.TaskName},// Test Device\n    {Test:\"Value\",  Value:InputPayload.Value,    Title:\"Value have not allowed chars\"+InputPayload.Value}         // Test Value\n];\nMessage += \"\\n\\nTest allowed Chars:\"\nvar FoundError = false\nfor (var AA in Test){\n    // Test String in Test[AA].Value\n    // if false send notice with node.send\n    // and break \n  \n    var Result = VerifyTextUnicodeCharacters(Test[AA].Value)\n    Message += \"\\n\"+Test[AA].Test+\":\\t\"\n    if (Result[0]){\n        Message +=\"Allowed\"\n    }else{\n        Message +=\"'\"\n        for (var BB in Result[1]){\n            Message += String.fromCharCode(Result[1][BB])\n        }\n        Message += \"'\"+ \" Not Allowed\"    \n    }\n  if (!Result[0])FoundError=true\n}\n\nif (FoundError){\n    //Found errors send message and break this packet.\n    var NoticeTitle = \"Device Incorrect installed:\"\n    if (InputPayload.Value!=\"LWT\") node.send([null,{payload:{data:{\"title\":NoticeTitle,\"message\":Message}}}])\n\n    throw new Error(Message);\n}\n//Load NamePrefix\nvar NamePrefix = flow.get(\"NamePrefix\");\nif (NamePrefix==undefined )NamePrefix=\"\";\n\n//Load OutputMQTT\nvar OutputMQTT = flow.get(\"OutputMQTT\");\nif (OutputMQTT==undefined )OutputMQTT=\"homeassistant\";\n\n//Load Settings\nvar Settings = flow.get(\"Settings\");\nif (Settings==undefined )Settings={};\n\n\n//node.warn(Message)\nvar CurrentList = flow.get(\"List\");\nif (CurrentList==undefined )CurrentList=[];\nif ( CurrentList==\"\")CurrentList=[];\nvar Found2 = false\nvar CheckPrefix = InputPayload.Value.substring(0,1)\nfor (var BB in CurrentList){\n    var Found = 4\n    for (var CC in CurrentList[BB]){\n        if (CurrentList[BB][CC]==InputPayload[CC])Found -= 1\n    }\n    if (Found==0) Found2 = true\n    \n    \n    if (Found2){\n        Message +=\"\\nFound Topic in List at:\"+BB\n        break\n        \n    }    \n}\n\nif (!Found2&&CheckPrefix!=\"_\"){\n    var Test_type = InputPayload.Value.toLowerCase()\n    \n    var type = \"sensor\"\n    //Prepare MQTT message\n    var Values = {   \n     name : InputPayload.Unit+\" \"+InputPayload.TaskName+\" \"+InputPayload.Value,//\n     unique_id : InputPayload.Unit+\"_\"+InputPayload.TaskName+\"_\"+InputPayload.Value,\n     device:{\n        ids : [NamePrefix+InputPayload.Unit],\n        model : \"ESPEASY\",\n        manufacturer : \"ESPEASY\",\n        name : NamePrefix+InputPayload.Unit\n        \n     },\n     state_topic : msg.topic//,\n     //unit_of_measurement : \"\",\n     \n    }\n    // This is default settings if Settings node is not found!\n    // Do not use !!!\n    var NotSensors = [\n        {\n            ValueName: \"State\",\n            Type: \"switch\"\n        },\n        {\n            ValueName: \"Relay\",\n            Type: \"switch\"\n        },\n        {\n            ValueName: \"Brightness\",\n            Type: \"light\",\n            Brightness: 255,\n            RGB: true\n        },\n        {\n            \"ValueName\": \"Percent\",\n            \"Type\": \"light\",\n            \"Brightness\": 100\n        }\n    ]\n    // This is default settings if Settings node is not found!\n    // Do not use !!!\n    var Units = [\n        {\n            \"ValueName\": \"battery\",\n            \"Unit\": \"%\",\n            \"Device_Class\": \"battery\"\n        },\n        {\n            \"ValueName\": \"humidity\",\n            \"Unit\": \"%\",\n            \"Device_Class\": \"humidity\"\n        },\n        {\n            \"ValueName\": \"temperature\",\n            \"Unit\": \"Â°C\",\n            \"Device_Class\": \"temperature\"\n        },\n        {\n            \"ValueName\": \"power\",\n            \"Unit\": \"W\",\n            \"Device_Class\": \"power\"\n        },\n        {\n            \"ValueName\": \"pressure\",\n            \"Unit\": \"hPA\",\n            \"Device_Class\": \"pressure\"\n        },\n        {\n            \"ValueName\": \"current\",\n            \"Unit\": \"A\",\n            \"Device_Class\": \"current\"\n        },\n        {\n            \"ValueName\": \"energy\",\n            \"Unit\": \"KWh\",\n            \"Device_Class\": \"energy\"\n        },\n        {\n            \"ValueName\": \"voltage\",\n            \"Unit\": \"V\",\n            \"Device_Class\": \"voltage\"\n        },\n        {\n            \"ValueName\": \"gm\",\n            \"Unit\": \"GM\"\n        }\n    ]\n    //Import settings if variable is declared \n    if (Settings.NotSensors!=undefined){\n        NotSensors = Settings.NotSensors\n    }    \n    if (Settings.Units!=undefined){\n        Units = Settings.Units\n    }\n    var FoundObject = {}    \n    for (var AA in NotSensors){\n       //loop all name alternetivs against the list of known variable names\n       //Set to that type of device if found\n       //else its a sensor and only input device\n       //node.warn(\"Check if:\"+InputPayload.Value+\"==\"+NotSensors[AA][0])\n       if (NotSensors[AA].ValueName!=undefined&&NotSensors[AA].Type!=undefined){\n            var Check = InputPayload.Value.indexOf(NotSensors[AA].ValueName)\n            if (Check>-1){\n                //Found that its declared and the set the type\n                FoundObject = NotSensors[AA]\n                type=NotSensors[AA].Type\n                \n            }\n       }    \n    }\n    \n    //node.warn(\"Check Light:\"+FoundObject.Brightness)\n    if (type==\"light\"){\n        Message += \"Device is a Light\"\n        //node.warn(\"Check Light:\"+InputPayload.TaskName)\n        var BaseTopic =  InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/\"+InputPayload.Value\n        Values.state_topic =InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/_\"+InputPayload.Value\n        //Values.optimistic = true\n        Values.command_topic = BaseTopic+\"/State\"\n        Values.payload_on = 1.00\n        Values.payload_off = 0.00\n        if (FoundObject.Brightness==undefined) Values.brightness_scale=100\n        else Values.brightness_scale = FoundObject.Brightness\n        Values.brightness_state_topic =BaseTopic\n        Values.brightness_command_topic = BaseTopic+\"/Set\"\n        var SetRGB=false\n        if(FoundObject.RGB!=undefined) SetRGB=FoundObject.RGB\n        if (SetRGB){\n            Values.optimistic = true\n            Values.rgb_command_topic =  \"O\"+BaseTopic+\"/RGB\"  \n            \n        }\n        \n    }\n    if (type==\"switch\"){\n        Message += \"Device is a Switch\"\n        Values.state_off = 0\n        Values.state_on = 1\n        Values.payload_on =     \"event,Set\"+InputPayload.Value+\"=1\"\n        Values.payload_off =    \"event,Set\"+InputPayload.Value+\"=0\"\n        Values.command_topic = InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/cmd\"\n    }\n    if (type==\"climate\"){\n        Message += \"Device is a climate\"\n        delete Values['state_topic']\n        var BaseTopic =  InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/\"+InputPayload.Value\n        if (FoundObject.max_temp!=undefined) Values.max_temp = FoundObject.max_temp\n        if (FoundObject.min_temp!=undefined) Values.min_temp = FoundObject.min_temp\n        if (FoundObject.temp_step!=undefined) Values.temp_step = FoundObject.temp_step\n        if (FoundObject.mode_state_topic!=undefined)Values.mode_state_topic = InputPayload.Prefix+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"/_FanModeSet\"\n        Values.temperature_command_topic = BaseTopic+\"/Set\"\n        Values.current_temperature_topic = BaseTopic\n        Values.mode_command_topic =  \"O\"+BaseTopic+\"/FanMode\"\n        \n    }\n    var Topic = OutputMQTT+\"/\"+type+\"/\"+InputPayload.Unit+\"/\"+InputPayload.TaskName+\"_\"+InputPayload.Value+\"/config\"\n    \n    var Found = false\n    if (type==\"sensor\"){\n        Message += \"Device is a Sensor\"\n        for (var AA in Units){\n            if (Units[AA].ValueName==Test_type){\n                if (Units[AA].Device_Class!=undefined){\n                    Values.device_class=Units[AA].Device_Class\n                }    \n                Found=true\n                Values.unit_of_measurement=Units[AA].Unit\n            }    \n        }\n        if(Debug)node.error(\"Setting unit_measurment:\"+Settings.UseDefaultUnit+\"\\n Found:\"+Found+\"\\n Test_type:\"+Test_type) \n        if (!Found){\n            if (Settings.UseDefaultUnit==undefined){\n                Values.unit_of_measurement = InputPayload.Value\n            }\n            else if (Settings.UseDefaultUnit==true){\n              //node.error(\"Setting unit_measurment:\"+Settings.UseDefaultUnit+\"\\n Found:\"+Found+\"\\n Test_type:\"+Test_type) \n              if (Settings.DefaultUnit==undefined){\n                Values.unit_of_measurement = InputPayload.Value  \n              }else{\n                Values.unit_of_measurement = Settings.DefaultUnit  \n              }\n            } \n        }\n    }\n    Values.unique_id= type+\".\"+Values.unique_id\n    Values.unique_id= Values.unique_id.toLowerCase()\n    Message += \"\\n\\nValues:\"\n    Message += \"\\n type:\"+type\n    Message += \"\\n name:\"+Values.name\n    Message += \"\\n unique_id:\"+Values.unique_id\n    Message += \"\\n device_class:\"+Values.device_class\n    Message += \"\\n state_topic:\"+Values.state_topic\n    Message += \"\\n unit_of_measurement:\"+Values.unit_of_measurement\n    Message += \"\\n ids:\"+Values.ids\n    Message += \"\\n devname:\"+Values.devname\n    CurrentList.push(InputPayload)\n    node.send( {\"payload\":Values,\"topic\":Topic})\n}\nflow.set(\"List\",CurrentList)\nif(Debug)node.warn(Message)\n",
      "outputs":2,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "libs":[
         
      ],
      "x":820,
      "y":780,
      "wires":[
         [
            "61dc00b3.b4bf",
            "7d13c4d8.26b26c"
         ],
         [
            "8cfbb7f6.89f268",
            "1ccf5897.d9e477"
         ]
      ]
   },
   {
      "id":"8599bbaf.213778",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Load List",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":320,
      "y":60,
      "wires":[
         [
            "10942935.b68447"
         ]
      ]
   },
   {
      "id":"2401637c.25954c",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Load Settings",
      "info":"",
      "x":330,
      "y":20,
      "wires":[
         
      ]
   },
   {
      "id":"d8b023b3.f5f1e",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Save Settings",
      "info":"",
      "x":330,
      "y":100,
      "wires":[
         
      ]
   },
   {
      "id":"a1cb02f6.eb306",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Main Flow",
      "info":"",
      "x":140,
      "y":680,
      "wires":[
         
      ]
   },
   {
      "id":"6d3d037.bac3bfc",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"All",
      "payloadType":"str",
      "x":1270,
      "y":40,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"8d038711.4d3c28",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"None",
      "payloadType":"str",
      "x":1270,
      "y":80,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"5f738a1d.0a39f4",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"InputEnabled",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1480,
      "y":40,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"e3b57f40.ed83c",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"InputEnabled",
      "propertyType":"flow",
      "rules":[
         {
            "t":"eq",
            "v":"All",
            "vt":"str"
         },
         {
            "t":"eq",
            "v":"SingelTopic",
            "vt":"str"
         },
         {
            "t":"false"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":3,
      "x":190,
      "y":840,
      "wires":[
         [
            "e9b79ec3.be8f9"
         ],
         [
            "12ae2bf8.72d214"
         ],
         [
            
         ]
      ]
   },
   {
      "id":"3585d5c5.d070ba",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"SingelTopic",
      "payloadType":"str",
      "x":1290,
      "y":120,
      "wires":[
         [
            "5f738a1d.0a39f4"
         ]
      ]
   },
   {
      "id":"e1fe0ffe.531ce",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"Debug",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1460,
      "y":300,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"3c898208.b1b99e",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"true",
      "payloadType":"bool",
      "x":1270,
      "y":300,
      "wires":[
         [
            "e1fe0ffe.531ce"
         ]
      ]
   },
   {
      "id":"8e1e2ca7.4581a",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"false",
      "payloadType":"bool",
      "x":1270,
      "y":380,
      "wires":[
         [
            "e1fe0ffe.531ce"
         ]
      ]
   },
   {
      "id":"4b11e5af.69564c",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Sensor example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/sensor/ESP_Fan_Controller_6/Tak_Temp_Temperature/config",
      "payload":"{\"name\":\"ESP_Fan_Controller_6 Temperature\",\"unique_id\":\"ESP_Fan_Controller_6_Tak_Temp_Temperature\",\"device\":{\"ids\":[\"ESP_Fan_Controller_6\"],\"model\":\"ESPEASY\",\"name\":\"ESP_Fan_Controller_6\"},\"device_class\":\"temperature\",\"state_topic\":\"EE/ESP_Fan_Controller_6/Tak_Temp/Temperature\",\"unit_of_measurement\":\"C\"}",
      "payloadType":"json",
      "x":1020,
      "y":620,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"61dc00b3.b4bf",
      "type":"mqtt out",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"",
      "qos":"",
      "retain":"true",
      "broker":"18ac67d8.ba0268",
      "x":1290,
      "y":760,
      "wires":[
         
      ]
   },
   {
      "id":"69a93b8d.dbe564",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Clear Example sensor",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/sensor/ESP_Fan_Controller_6/Tak_Temp_Temperature/config",
      "payload":"{}",
      "payloadType":"json",
      "x":1040,
      "y":660,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"46723d78.be2ee4",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"ESP_",
      "payloadType":"str",
      "x":830,
      "y":220,
      "wires":[
         [
            "80c698db.01a5c8"
         ]
      ]
   },
   {
      "id":"80c698db.01a5c8",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"NamePrefix",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1040,
      "y":220,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"580263.4b1c9d9c",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"List",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":510,
      "y":180,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"253111b7.66b2ce",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Clear List",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"",
      "payloadType":"str",
      "x":320,
      "y":180,
      "wires":[
         [
            "580263.4b1c9d9c"
         ]
      ]
   },
   {
      "id":"76c77bfd.d0bce4",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":1310,
      "y":620,
      "wires":[
         
      ]
   },
   {
      "id":"31675fed.b99f7",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"payload",
      "targetType":"msg",
      "statusVal":"",
      "statusType":"auto",
      "x":490,
      "y":860,
      "wires":[
         
      ]
   },
   {
      "id":"123b1bdd.4ba514",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"List",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1010,
      "y":40,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"89aa47c5.370818",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"payload",
            "pt":"msg",
            "to":"List",
            "tot":"flow"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":520,
      "y":80,
      "wires":[
         [
            "8eded1f8.44643"
         ]
      ]
   },
   {
      "id":"7f2cabb0.391184",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"V2.2.3",
      "info":"# V2.2.3\n - Add possible to enable Set fanmode topic\n   See SetTime\n\n# V2.2.2\n - Change presure to hPa\n  you need to clear list and save list to update your already created devices \n - Added som comments in function node that the settings that is used is in Settings node\n - Documentation updated to show it.\n \n# V2.2.1\n - Added support for changing default unit text\n - Settings inject node updated with new info.\n - Default settings for new device so new units get \".\" as sufix/unit if not found in units list in settings inject node.\n \n\n# V2.2.0\n - Add Send notification if Device is setup wrong and don't Create a device. \n - example unsupported char is used in topic\n - (not A-Z,_,0-9)\n\n# V2.1.2\n - Better Debug output added\n - More correct name of Flow settings\n   you can select what to Input to allow\n   All, none or a Singel topic\n\n# V2.1.1\n - Small bugfix for bug that did that is skipped variable State  \n - Add as New device type for set time with Slider 0-240\n\n# V2.1    \n - Added Termostat \n - Fixed load list function\n        \n# V2.0 Rewrite of original node\n\nhttps://github.com/KnatteAnka/NodeRED_ESPEASY_AutoDiscovery",
      "x":50,
      "y":20,
      "wires":[
         
      ]
   },
   {
      "id":"91511d8a.85c15",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Light example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/light/TV_R_11/Stepper_Percent/config",
      "payload":"{\"name\":\"TV_R_11 Stepper Percent\",\"unique_id\":\"TV_R_11_Stepper_Percent\",\"device\":{\"ids\":[\"ESP_TV_R_11\"],\"model\":\"ESPEASY\",\"manufacturer\":\"ESPEASY\",\"name\":\"ESP_TV_R_11\"},\"command_topic\":\"EE/TV_R_11/Stepper/Percent/State\",\"optimistic\":true,\"payload_on\":\"1\",\"payload_off\":\"0\",\"brightness_scale\":100,\"brightness_state_topic\":\"EE/TV_R_11/Stepper/Percent\",\"brightness_command_topic\":\"EE/TV_R_11/Stepper/Percent/Set\"}",
      "payloadType":"json",
      "x":1010,
      "y":540,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"b9d56a96.ef3328",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Clear Example Light",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/light/Nodered_Light/LightTest/config",
      "payload":"{}",
      "payloadType":"json",
      "x":1030,
      "y":580,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"5d3cde1e.0ed88",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Settings",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"{\"Units\":[{\"ValueName\":\"battery\",\"Unit\":\"%\",\"Device_Class\":\"battery\"},{\"ValueName\":\"humidity\",\"Unit\":\"%\",\"Device_Class\":\"humidity\"},{\"ValueName\":\"temperature\",\"Unit\":\"Â°C\",\"Device_Class\":\"temperature\"},{\"ValueName\":\"temp\",\"Unit\":\"Â°C\",\"Device_Class\":\"temperature\"},{\"ValueName\":\"power\",\"Unit\":\"W\",\"Device_Class\":\"power\"},{\"ValueName\":\"pressure\",\"Unit\":\"hPa\",\"Device_Class\":\"pressure\"},{\"ValueName\":\"current\",\"Unit\":\"A\",\"Device_Class\":\"current\"},{\"ValueName\":\"energy\",\"Unit\":\"KWh\",\"Device_Class\":\"energy\"},{\"ValueName\":\"voltage\",\"Unit\":\"V\",\"Device_Class\":\"voltage\"},{\"ValueName\":\"gm\",\"Unit\":\"GM\"},{\"ValueName\":\"elapsedtime\",\"Unit\":\"S\"}],\"NotSensors\":[{\"ValueName\":\"State\",\"Type\":\"switch\"},{\"ValueName\":\"Relay\",\"Type\":\"switch\"},{\"ValueName\":\"Brightness\",\"Type\":\"light\",\"Brightness\":255,\"RGB\":false},{\"ValueName\":\"RGBBrightness\",\"Type\":\"light\",\"Brightness\":255,\"RGB\":true},{\"ValueName\":\"Percent\",\"Type\":\"light\",\"Brightness\":100},{\"ValueName\":\"SetTemp\",\"Type\":\"climate\",\"max_temp\":24,\"min_temp\":17,\"temp_step\":0.5},{\"ValueName\":\"CounterTime\",\"Type\":\"light\",\"Brightness\":240,\"RGB\":false},{\"ValueName\":\"SetTime\",\"Type\":\"climate\",\"max_temp\":24,\"min_temp\":0,\"temp_step\":0.5,\"mode_state_topic\":true}],\"UseDefaultUnit\":true,\"DefaultUnit\":\".\"}",
      "payloadType":"json",
      "x":840,
      "y":340,
      "wires":[
         [
            "eb2e62bc.72124"
         ]
      ]
   },
   {
      "id":"eb2e62bc.72124",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"Settings",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1020,
      "y":340,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"1ff20790.1b7ed8",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"homeassistant",
      "payloadType":"str",
      "x":840,
      "y":180,
      "wires":[
         [
            "ea36bbf4.a60468"
         ]
      ]
   },
   {
      "id":"ea36bbf4.a60468",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"OutputMQTT",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1040,
      "y":180,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"e9b79ec3.be8f9",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"topic",
      "propertyType":"msg",
      "rules":[
         {
            "t":"cont",
            "v":"/config",
            "vt":"str"
         },
         {
            "t":"cont",
            "v":"/cmd",
            "vt":"str"
         },
         {
            "t":"else"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":3,
      "x":310,
      "y":800,
      "wires":[
         [
            
         ],
         [
            
         ],
         [
            "1b935601.6f77fa"
         ]
      ]
   },
   {
      "id":"f982ba54.1dc028",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Termostat example",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/climate/Nodered_Light/LightTest/config",
      "payload":"{\"name\":\"NodeRed_1 Time Time\",\"unique_id\":\"NodeRed_1_Time_Time\",\"device\":{\"ids\":[\"NodeRed_1\"],\"model\":\"ESPEASY\",\"manufacturer\":\"ESPEASY\",\"name\":\"NodeRed_1\"},\"temperature_command_topic\":\"EE/NodeRed_1/Temp/SetTemperature/Set\",\"current_temperature_topic\":\"EE/NodeRed_1/Temp/SetTemperature\",\"mode_command_topic\":\"OEE/NodeRed_1/Temp/SetTemperature/FanMode\",\"max_temp\":24,\"min_temp \":17,\"temp_step\":0.5}",
      "payloadType":"json",
      "x":1030,
      "y":460,
      "wires":[
         [
            "61dc00b3.b4bf",
            "76c77bfd.d0bce4"
         ]
      ]
   },
   {
      "id":"c906085f.cdb168",
      "type":"mqtt in",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "topic":"OEE/#",
      "qos":"2",
      "datatype":"auto",
      "broker":"18ac67d8.ba0268",
      "inputs":0,
      "x":490,
      "y":960,
      "wires":[
         [
            "6b853310.6e826c"
         ]
      ]
   },
   {
      "id":"3027cc12.6e1f24",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":1050,
      "y":1000,
      "wires":[
         
      ]
   },
   {
      "id":"6b853310.6e826c",
      "type":"function",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "func":"var Debug = flow.get(\"Debug\")\nvar InputString = msg.payload\nvar InputTopic = msg.topic\nvar lastSlash = msg.topic.lastIndexOf(\"/\")+1\nvar Command = msg.topic.substring(lastSlash)\nvar Base = msg.topic.substring(1,lastSlash)\nvar Topic = []\nvar Payload = []\nif(Debug)node.warn(\"InputString:\"+InputString+\"\\n Topic:\"+InputTopic+\"\\n Command:\"+Command+\"\\n Base:\"+Base)\nif (Command==\"RGB\"){\n    Values = InputString.split(\",\")\n    for (var AA in Values){\n        var Output={}\n        Output.topic = Base+\"_\"+Command[AA]\n        Output.payload = Values[AA]\n        node.send(Output)\n    }\n    \n}\nif (Command==\"FanMode\"){\n    var Output={}\n    var FanModeSettings = {\n        \"off\":0,\n        \"auto\":1,\n        \"heat\":2,\n        \"cool\":3,\n        \"dry\":4,\n        \"fan_only\":5\n    }\n    for (var AA in FanModeSettings){\n        if (AA==InputString){\n            Output.topic = Base+\"_\"+Command\n            Output.payload = FanModeSettings[AA]\n            break\n        }\n    }    \n \n if (Output.topic != undefined)node.send(Output)\n}",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "libs":[
         
      ],
      "x":620,
      "y":960,
      "wires":[
         [
            "61dc00b3.b4bf",
            "cbfd5ad0.5c4b38"
         ]
      ]
   },
   {
      "id":"cbfd5ad0.5c4b38",
      "type":"switch",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"Debug",
      "propertyType":"flow",
      "rules":[
         {
            "t":"true"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":1,
      "x":910,
      "y":1000,
      "wires":[
         [
            "3027cc12.6e1f24"
         ]
      ]
   },
   {
      "id":"841a8c4e.81a6",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"The SingelTopic",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":0.1,
      "topic":"",
      "payload":"EE/DoorESP_8/DoorBell/State",
      "payloadType":"str",
      "x":1300,
      "y":180,
      "wires":[
         [
            "a44751e2.5b03c"
         ]
      ]
   },
   {
      "id":"a44751e2.5b03c",
      "type":"change",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "rules":[
         {
            "t":"set",
            "p":"SingelTopic",
            "pt":"flow",
            "to":"payload",
            "tot":"msg"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1490,
      "y":180,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"6a88dbee.ddb744",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Example Devices",
      "info":"",
      "x":1040,
      "y":420,
      "wires":[
         
      ]
   },
   {
      "id":"37bea68d.70097a",
      "type":"inject",
      "z":"c7a7e5ea.d0e448",
      "name":"Clear Example Termostat",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"homeassistant/climate/Nodered_Light/LightTest/config",
      "payload":"{}",
      "payloadType":"json",
      "x":1050,
      "y":500,
      "wires":[
         [
            "61dc00b3.b4bf"
         ]
      ]
   },
   {
      "id":"32fd2078.63187",
      "type":"json",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "property":"payload",
      "action":"",
      "pretty":false,
      "x":830,
      "y":40,
      "wires":[
         [
            "d2cb1728.e26c68",
            "123b1bdd.4ba514"
         ]
      ]
   },
   {
      "id":"8cfbb7f6.89f268",
      "type":"debug",
      "z":"c7a7e5ea.d0e448",
      "name":"Notice",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "statusVal":"",
      "statusType":"auto",
      "x":1070,
      "y":940,
      "wires":[
         
      ]
   },
   {
      "id":"c07971c4.46b07",
      "type":"api-call-service",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "server":"a64069e3.122918",
      "version":3,
      "debugenabled":false,
      "service_domain":"notify",
      "service":"persistent_notification",
      "entityId":"",
      "data":"",
      "dataType":"json",
      "mergecontext":"",
      "mustacheAltTags":false,
      "outputProperties":[
         
      ],
      "queue":"none",
      "x":1300,
      "y":880,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"1ccf5897.d9e477",
      "type":"delay",
      "z":"c7a7e5ea.d0e448",
      "name":"",
      "pauseType":"delay",
      "timeout":"30",
      "timeoutUnits":"seconds",
      "rate":"1",
      "nbRateUnits":"1",
      "rateUnits":"second",
      "randomFirst":"1",
      "randomLast":"5",
      "randomUnits":"seconds",
      "drop":false,
      "outputs":1,
      "x":1080,
      "y":880,
      "wires":[
         [
            "c07971c4.46b07"
         ]
      ]
   },
   {
      "id":"fd84c3fa.c3423",
      "type":"comment",
      "z":"c7a7e5ea.d0e448",
      "name":"Settings",
      "info":"Select node below to show settings",
      "x":830,
      "y":300,
      "wires":[
         
      ]
   },
   {
      "id":"18ac67d8.ba0268",
      "type":"mqtt-broker",
      "name":"MQTT",
      "broker":"localhost",
      "port":"1883",
      "clientid":"",
      "usetls":false,
      "compatmode":false,
      "keepalive":"60",
      "cleansession":true,
      "birthTopic":"",
      "birthQos":"0",
      "birthPayload":"",
      "closeTopic":"",
      "closeQos":"0",
      "closePayload":"",
      "willTopic":"",
      "willQos":"0",
      "willPayload":""
   },
   {
      "id":"a64069e3.122918",
      "type":"server",
      "name":"Home Assistant",
      "version":2,
      "addon":true,
      "rejectUnauthorizedCerts":true,
      "ha_boolean":"y|yes|true|on|home|open",
      "connectionDelay":true,
      "cacheJson":true,
      "heartbeat":false,
      "heartbeatInterval":30
   }
]
